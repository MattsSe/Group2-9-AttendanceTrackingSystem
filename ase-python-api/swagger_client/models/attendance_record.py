# coding: utf-8

"""
    ASE Attendance API

    An API for keeping track of your contacts and the companies they work for.   Don't forget to take it for a spin by clicking on the **Try in Client** button next to each operation! All read operations are public and don't require authentication.  <div> <img src='https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png' width='90%'> <div>  <!-- ![](https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png) -->  

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AttendanceRecord(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attendance_id': 'str',
        'student_id': 'str',
        'tutorial_group_id': 'str',
        'week_id': 'str',
        'presented': 'bool'
    }

    attribute_map = {
        'attendance_id': 'attendance_id',
        'student_id': 'student_id',
        'tutorial_group_id': 'tutorial_group_id',
        'week_id': 'week_id',
        'presented': 'presented'
    }

    def __init__(self, attendance_id=None, student_id=None, tutorial_group_id=None, week_id=None, presented=None):
        """
        AttendanceRecord - a model defined in Swagger
        """

        self._attendance_id = None
        self._student_id = None
        self._tutorial_group_id = None
        self._week_id = None
        self._presented = None

        if attendance_id is not None:
          self.attendance_id = attendance_id
        if student_id is not None:
          self.student_id = student_id
        if tutorial_group_id is not None:
          self.tutorial_group_id = tutorial_group_id
        if week_id is not None:
          self.week_id = week_id
        if presented is not None:
          self.presented = presented

    @property
    def attendance_id(self):
        """
        Gets the attendance_id of this AttendanceRecord.

        :return: The attendance_id of this AttendanceRecord.
        :rtype: str
        """
        return self._attendance_id

    @attendance_id.setter
    def attendance_id(self, attendance_id):
        """
        Sets the attendance_id of this AttendanceRecord.

        :param attendance_id: The attendance_id of this AttendanceRecord.
        :type: str
        """

        self._attendance_id = attendance_id

    @property
    def student_id(self):
        """
        Gets the student_id of this AttendanceRecord.

        :return: The student_id of this AttendanceRecord.
        :rtype: str
        """
        return self._student_id

    @student_id.setter
    def student_id(self, student_id):
        """
        Sets the student_id of this AttendanceRecord.

        :param student_id: The student_id of this AttendanceRecord.
        :type: str
        """

        self._student_id = student_id

    @property
    def tutorial_group_id(self):
        """
        Gets the tutorial_group_id of this AttendanceRecord.

        :return: The tutorial_group_id of this AttendanceRecord.
        :rtype: str
        """
        return self._tutorial_group_id

    @tutorial_group_id.setter
    def tutorial_group_id(self, tutorial_group_id):
        """
        Sets the tutorial_group_id of this AttendanceRecord.

        :param tutorial_group_id: The tutorial_group_id of this AttendanceRecord.
        :type: str
        """

        self._tutorial_group_id = tutorial_group_id

    @property
    def week_id(self):
        """
        Gets the week_id of this AttendanceRecord.

        :return: The week_id of this AttendanceRecord.
        :rtype: str
        """
        return self._week_id

    @week_id.setter
    def week_id(self, week_id):
        """
        Sets the week_id of this AttendanceRecord.

        :param week_id: The week_id of this AttendanceRecord.
        :type: str
        """

        self._week_id = week_id

    @property
    def presented(self):
        """
        Gets the presented of this AttendanceRecord.

        :return: The presented of this AttendanceRecord.
        :rtype: bool
        """
        return self._presented

    @presented.setter
    def presented(self, presented):
        """
        Sets the presented of this AttendanceRecord.

        :param presented: The presented of this AttendanceRecord.
        :type: bool
        """

        self._presented = presented

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AttendanceRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
