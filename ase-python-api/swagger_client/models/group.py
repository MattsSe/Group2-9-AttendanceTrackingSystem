# coding: utf-8

"""
    ASE Attendance API

    An API for keeping track of your contacts and the companies they work for.   Don't forget to take it for a spin by clicking on the **Try in Client** button next to each operation! All read operations are public and don't require authentication.  <div> <img src='https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png' width='90%'> <div>  <!-- ![](https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png) -->  

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Group(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'max_slots': 'int',
        'students': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'max_slots': 'maxSlots',
        'students': 'students'
    }

    def __init__(self, id=None, max_slots=None, students=None):
        """
        Group - a model defined in Swagger
        """

        self._id = None
        self._max_slots = None
        self._students = None

        self.id = id
        self.max_slots = max_slots
        if students is not None:
          self.students = students

    @property
    def id(self):
        """
        Gets the id of this Group.
        Auto-generated primary key field

        :return: The id of this Group.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Group.
        Auto-generated primary key field

        :param id: The id of this Group.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max_slots(self):
        """
        Gets the max_slots of this Group.
        the maximum students a group can contain

        :return: The max_slots of this Group.
        :rtype: int
        """
        return self._max_slots

    @max_slots.setter
    def max_slots(self, max_slots):
        """
        Sets the max_slots of this Group.
        the maximum students a group can contain

        :param max_slots: The max_slots of this Group.
        :type: int
        """
        if max_slots is None:
            raise ValueError("Invalid value for `max_slots`, must not be `None`")

        self._max_slots = max_slots

    @property
    def students(self):
        """
        Gets the students of this Group.
        This property is a reference to registered student for this group

        :return: The students of this Group.
        :rtype: list[int]
        """
        return self._students

    @students.setter
    def students(self, students):
        """
        Sets the students of this Group.
        This property is a reference to registered student for this group

        :param students: The students of this Group.
        :type: list[int]
        """

        self._students = students

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
