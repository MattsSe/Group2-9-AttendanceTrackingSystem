# coding: utf-8

"""
    ASE Attendance API

    An API for keeping track of your contacts and the companies they work for.   Don't forget to take it for a spin by clicking on the **Try in Client** button next to each operation! All read operations are public and don't require authentication.  <div> <img src='https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png' width='90%'> <div>  <!-- ![](https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png) -->  

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def groups_students_get(self, **kwargs):
        """
        Get registered users in any groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_students_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int size: Size of the page to retrieve.
        :param int page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed.
        :param int x_page_count:
        :param int x_page_number: 1
        :param str x_page_size:
        :param int x_total_count:
        :return: list[Student]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_students_get_with_http_info(**kwargs)
        else:
            (data) = self.groups_students_get_with_http_info(**kwargs)
            return data

    def groups_students_get_with_http_info(self, **kwargs):
        """
        Get registered users in any groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_students_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int size: Size of the page to retrieve.
        :param int page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed.
        :param int x_page_count:
        :param int x_page_number: 1
        :param str x_page_size:
        :param int x_total_count:
        :return: list[Student]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'page', 'sort', 'x_page_count', 'x_page_number', 'x_page_size', 'x_total_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_students_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('$size', params['size']))
        if 'page' in params:
            query_params.append(('$page', params['page']))
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))

        header_params = {}
        if 'x_page_count' in params:
            header_params['X-Page-Count'] = params['x_page_count']
        if 'x_page_number' in params:
            header_params['X-Page-Number'] = params['x_page_number']
        if 'x_page_size' in params:
            header_params['X-Page-Size'] = params['x_page_size']
        if 'x_total_count' in params:
            header_params['X-Total-Count'] = params['x_total_count']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/students', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Student]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def records_attendanceid_delete(self, attendanceid, **kwargs):
        """
        Remove a specific attendane record
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_attendanceid_delete(attendanceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str attendanceid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.records_attendanceid_delete_with_http_info(attendanceid, **kwargs)
        else:
            (data) = self.records_attendanceid_delete_with_http_info(attendanceid, **kwargs)
            return data

    def records_attendanceid_delete_with_http_info(self, attendanceid, **kwargs):
        """
        Remove a specific attendane record
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_attendanceid_delete_with_http_info(attendanceid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str attendanceid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attendanceid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_attendanceid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attendanceid' is set
        if ('attendanceid' not in params) or (params['attendanceid'] is None):
            raise ValueError("Missing the required parameter `attendanceid` when calling `records_attendanceid_delete`")


        collection_formats = {}

        path_params = {}
        if 'attendanceid' in params:
            path_params['attendanceid'] = params['attendanceid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/records/{attendanceid}/', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def records_groups_group_id_get(self, group_id, **kwargs):
        """
        Get All records of a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_groups_group_id_get(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_id: (required)
        :param int size:
        :param int pages: number of pages
        :param str sort: Sort by attribute
        :param str filter: Filter by attribute
        :return: list[AttendanceRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.records_groups_group_id_get_with_http_info(group_id, **kwargs)
        else:
            (data) = self.records_groups_group_id_get_with_http_info(group_id, **kwargs)
            return data

    def records_groups_group_id_get_with_http_info(self, group_id, **kwargs):
        """
        Get All records of a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_groups_group_id_get_with_http_info(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_id: (required)
        :param int size:
        :param int pages: number of pages
        :param str sort: Sort by attribute
        :param str filter: Filter by attribute
        :return: list[AttendanceRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'size', 'pages', 'sort', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_groups_group_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `records_groups_group_id_get`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []
        if 'size' in params:
            query_params.append(('$size', params['size']))
        if 'pages' in params:
            query_params.append(('$pages', params['pages']))
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/records/groups/{groupId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AttendanceRecord]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def records_qr_student_id_get(self, student_id, **kwargs):
        """
        Get a personalized qr code as base64 string
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_qr_student_id_get(student_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str student_id: (required)
        :param int width: the desired with in pixels
        :param int height: the desired with in pixels
        :param str size: (width/height)
        :return: QrCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.records_qr_student_id_get_with_http_info(student_id, **kwargs)
        else:
            (data) = self.records_qr_student_id_get_with_http_info(student_id, **kwargs)
            return data

    def records_qr_student_id_get_with_http_info(self, student_id, **kwargs):
        """
        Get a personalized qr code as base64 string
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_qr_student_id_get_with_http_info(student_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str student_id: (required)
        :param int width: the desired with in pixels
        :param int height: the desired with in pixels
        :param str size: (width/height)
        :return: QrCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['student_id', 'width', 'height', 'size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_qr_student_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'student_id' is set
        if ('student_id' not in params) or (params['student_id'] is None):
            raise ValueError("Missing the required parameter `student_id` when calling `records_qr_student_id_get`")


        collection_formats = {}

        path_params = {}
        if 'student_id' in params:
            path_params['studentId'] = params['student_id']

        query_params = []
        if 'width' in params:
            query_params.append(('$width', params['width']))
        if 'height' in params:
            query_params.append(('$height', params['height']))
        if 'size' in params:
            query_params.append(('$size', params['size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/records/qr/{studentId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QrCode',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def records_students_student_id_get(self, student_id, **kwargs):
        """
        Get all records for a student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_students_student_id_get(student_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str student_id: (required)
        :param int size: max elements
        :param int sort: Sort by atrribute
        :param str filter: filter by attribute value
        :return: list[AttendanceRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.records_students_student_id_get_with_http_info(student_id, **kwargs)
        else:
            (data) = self.records_students_student_id_get_with_http_info(student_id, **kwargs)
            return data

    def records_students_student_id_get_with_http_info(self, student_id, **kwargs):
        """
        Get all records for a student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.records_students_student_id_get_with_http_info(student_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str student_id: (required)
        :param int size: max elements
        :param int sort: Sort by atrribute
        :param str filter: filter by attribute value
        :return: list[AttendanceRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['student_id', 'size', 'sort', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_students_student_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'student_id' is set
        if ('student_id' not in params) or (params['student_id'] is None):
            raise ValueError("Missing the required parameter `student_id` when calling `records_students_student_id_get`")


        collection_formats = {}

        path_params = {}
        if 'student_id' in params:
            path_params['studentId'] = params['student_id']

        query_params = []
        if 'size' in params:
            query_params.append(('$size', params['size']))
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))
        if 'filter' in params:
            query_params.append(('$filter', params['filter']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/records/students/{studentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AttendanceRecord]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def student_logout_delete(self, **kwargs):
        """
        Logs out the current logged in student session
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_logout_delete(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.student_logout_delete_with_http_info(**kwargs)
        else:
            (data) = self.student_logout_delete_with_http_info(**kwargs)
            return data

    def student_logout_delete_with_http_info(self, **kwargs):
        """
        Logs out the current logged in student session
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_logout_delete_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method student_logout_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/student/logout', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def student_register_post(self, body, **kwargs):
        """
        Register a new Student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_register_post(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserData body: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.student_register_post_with_http_info(body, **kwargs)
        else:
            (data) = self.student_register_post_with_http_info(body, **kwargs)
            return data

    def student_register_post_with_http_info(self, body, **kwargs):
        """
        Register a new Student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_register_post_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserData body: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method student_register_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `student_register_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/student/register', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Student',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def student_register_put(self, body, **kwargs):
        """
        Update a Student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_register_put(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Student body: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.student_register_put_with_http_info(body, **kwargs)
        else:
            (data) = self.student_register_put_with_http_info(body, **kwargs)
            return data

    def student_register_put_with_http_info(self, body, **kwargs):
        """
        Update a Student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_register_put_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Student body: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method student_register_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `student_register_put`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/student/register', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Student',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def student_studentid_qr_get(self, studentid, **kwargs):
        """
        Get the student QR Code
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_studentid_qr_get(studentid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str studentid: (required)
        :return: QrCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.student_studentid_qr_get_with_http_info(studentid, **kwargs)
        else:
            (data) = self.student_studentid_qr_get_with_http_info(studentid, **kwargs)
            return data

    def student_studentid_qr_get_with_http_info(self, studentid, **kwargs):
        """
        Get the student QR Code
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.student_studentid_qr_get_with_http_info(studentid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str studentid: (required)
        :return: QrCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['studentid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method student_studentid_qr_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'studentid' is set
        if ('studentid' not in params) or (params['studentid'] is None):
            raise ValueError("Missing the required parameter `studentid` when calling `student_studentid_qr_get`")


        collection_formats = {}

        path_params = {}
        if 'studentid' in params:
            path_params['studentid'] = params['studentid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/student/{studentid}/qr', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QrCode',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
