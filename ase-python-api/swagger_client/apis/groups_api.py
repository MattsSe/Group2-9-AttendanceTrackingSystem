# coding: utf-8

"""
    ASE Attendance API

    An API for keeping track of your contacts and the companies they work for.   Don't forget to take it for a spin by clicking on the **Try in Client** button next to each operation! All read operations are public and don't require authentication.  <div> <img src='https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png' width='90%'> <div>  <!-- ![](https://thecontactsapi.apispark.net/v1/img/cropped-contact-img.png) -->  

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GroupsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def groups_find_by_student_get(self, **kwargs):
        """
        Finds Groups by Student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_find_by_student_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_find_by_student_get_with_http_info(**kwargs)
        else:
            (data) = self.groups_find_by_student_get_with_http_info(**kwargs)
            return data

    def groups_find_by_student_get_with_http_info(self, **kwargs):
        """
        Finds Groups by Student
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_find_by_student_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_find_by_student_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/findByStudent', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Group]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_get(self, **kwargs):
        """
        Get the list of Groups
        Loads a list of Groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int size: Size of the page to retrieve.
        :param int page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed.
        :param bool free: Allows to filter the collections of groups whether they are free
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_get_with_http_info(**kwargs)
        else:
            (data) = self.groups_get_with_http_info(**kwargs)
            return data

    def groups_get_with_http_info(self, **kwargs):
        """
        Get the list of Groups
        Loads a list of Groups
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int size: Size of the page to retrieve.
        :param int page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed.
        :param bool free: Allows to filter the collections of groups whether they are free
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'page', 'sort', 'free']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('$size', params['size']))
        if 'page' in params:
            query_params.append(('$page', params['page']))
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))
        if 'free' in params:
            query_params.append(('free', params['free']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Group]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_delete(self, groupid, **kwargs):
        """
        Delete a Group
        Deletes a Group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_delete(groupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: Identifier of the Contact (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_delete_with_http_info(groupid, **kwargs)
        else:
            (data) = self.groups_groupid_delete_with_http_info(groupid, **kwargs)
            return data

    def groups_groupid_delete_with_http_info(self, groupid, **kwargs):
        """
        Delete a Group
        Deletes a Group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_delete_with_http_info(groupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: Identifier of the Contact (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_delete`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/groups/{groupid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_get(self, groupid, **kwargs):
        """
        Load an individual Group
        Loads a Group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_get(groupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: Identifier of the Contact (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_get_with_http_info(groupid, **kwargs)
        else:
            (data) = self.groups_groupid_get_with_http_info(groupid, **kwargs)
            return data

    def groups_groupid_get_with_http_info(self, groupid, **kwargs):
        """
        Load an individual Group
        Loads a Group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_get_with_http_info(groupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: Identifier of the Contact (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_get`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{groupid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Group',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_put(self, groupid, body, **kwargs):
        """
        Update a Group
        Stores a Group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_put(groupid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: Identifier of the Contact (required)
        :param Group body: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_put_with_http_info(groupid, body, **kwargs)
        else:
            (data) = self.groups_groupid_put_with_http_info(groupid, body, **kwargs)
            return data

    def groups_groupid_put_with_http_info(self, groupid, body, **kwargs):
        """
        Update a Group
        Stores a Group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_put_with_http_info(groupid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: Identifier of the Contact (required)
        :param Group body: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `groups_groupid_put`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/groups/{groupid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Group',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_students_get(self, groupid, **kwargs):
        """
        Get the users in a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_get(groupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed
        :return: list[Student]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_students_get_with_http_info(groupid, **kwargs)
        else:
            (data) = self.groups_groupid_students_get_with_http_info(groupid, **kwargs)
            return data

    def groups_groupid_students_get_with_http_info(self, groupid, **kwargs):
        """
        Get the users in a group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_get_with_http_info(groupid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed
        :return: list[Student]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'sort']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_students_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_students_get`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']

        query_params = []
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{groupid}/students', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Student]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_students_post(self, groupid, body, **kwargs):
        """
        Add a student to the group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_post(groupid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param Student body: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_students_post_with_http_info(groupid, body, **kwargs)
        else:
            (data) = self.groups_groupid_students_post_with_http_info(groupid, body, **kwargs)
            return data

    def groups_groupid_students_post_with_http_info(self, groupid, body, **kwargs):
        """
        Add a student to the group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_post_with_http_info(groupid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param Student body: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_students_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_students_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `groups_groupid_students_post`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/groups/{groupid}/students', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Student',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_students_studentid_delete(self, groupid, studentid, **kwargs):
        """
        Delete a user from the group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_studentid_delete(groupid, studentid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param str studentid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_students_studentid_delete_with_http_info(groupid, studentid, **kwargs)
        else:
            (data) = self.groups_groupid_students_studentid_delete_with_http_info(groupid, studentid, **kwargs)
            return data

    def groups_groupid_students_studentid_delete_with_http_info(self, groupid, studentid, **kwargs):
        """
        Delete a user from the group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_studentid_delete_with_http_info(groupid, studentid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param str studentid: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'studentid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_students_studentid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_students_studentid_delete`")
        # verify the required parameter 'studentid' is set
        if ('studentid' not in params) or (params['studentid'] is None):
            raise ValueError("Missing the required parameter `studentid` when calling `groups_groupid_students_studentid_delete`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']
        if 'studentid' in params:
            path_params['studentid'] = params['studentid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/groups/{groupid}/students/{studentid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_groupid_students_studentid_get(self, groupid, studentid, **kwargs):
        """
        Get an individual user from the group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_studentid_get(groupid, studentid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param str studentid: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_groupid_students_studentid_get_with_http_info(groupid, studentid, **kwargs)
        else:
            (data) = self.groups_groupid_students_studentid_get_with_http_info(groupid, studentid, **kwargs)
            return data

    def groups_groupid_students_studentid_get_with_http_info(self, groupid, studentid, **kwargs):
        """
        Get an individual user from the group
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_groupid_students_studentid_get_with_http_info(groupid, studentid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str groupid: (required)
        :param str studentid: (required)
        :return: Student
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['groupid', 'studentid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_groupid_students_studentid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'groupid' is set
        if ('groupid' not in params) or (params['groupid'] is None):
            raise ValueError("Missing the required parameter `groupid` when calling `groups_groupid_students_studentid_get`")
        # verify the required parameter 'studentid' is set
        if ('studentid' not in params) or (params['studentid'] is None):
            raise ValueError("Missing the required parameter `studentid` when calling `groups_groupid_students_studentid_get`")


        collection_formats = {}

        path_params = {}
        if 'groupid' in params:
            path_params['groupid'] = params['groupid']
        if 'studentid' in params:
            path_params['studentid'] = params['studentid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/groups/{groupid}/students/{studentid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Student',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def groups_post(self, body, **kwargs):
        """
        Create a Group
        Adds a Contact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_post(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Group body: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.groups_post_with_http_info(body, **kwargs)
        else:
            (data) = self.groups_post_with_http_info(body, **kwargs)
            return data

    def groups_post_with_http_info(self, body, **kwargs):
        """
        Create a Group
        Adds a Contact
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.groups_post_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Group body: (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `groups_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['HTTP_BASIC']

        return self.api_client.call_api('/groups/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Group',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
